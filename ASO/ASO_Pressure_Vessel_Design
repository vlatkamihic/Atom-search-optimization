import matplotlib.pyplot as plt
import csv
import math

from numpy import average
from atom import Atom
from Population import Population
import sys

####General parameters####
NO_EXP = 5 # number of experiments
NO_DIMS = 4 #Size of the individual (number of dimensions)
NGEN = 150 #number of generations
POP_SIZE = 30  #population size
#########################
#####ASO parameters######
ALPHA = 50
BETA = 0.2


####Other global variables####
F_MIN = 0    #Pressure Vessel Design function interval
F_MAX = 200     #Pressure Vessel Design function interval
G1 = 0 #Hoop stress
G2 = 0 #Longitudinal stress
G3 = 0 #Volume
G4 = 0 #Lenght
stop_evolution = False
q_min_series = []
q_max_series = []
q_avg_series = []
folderName = "ASO/Pressure_Vessel/"
F_MIN_VAL = sys.float_info.max
designConstraits = []


#Pressure_Vessel cost function
def costFunction(individual):
    #Implement Pressure_Vessel function
    global F_MIN_VAL
    global designConstraits

    Ts = individual[0]
    Th = individual[1]
    R = individual[2]
    L = individual[3]
    
    fit_val = 0
    G1 = -Ts + 0.0193*R
    G2 = -Th + 0.00954*R
    temp = 4 / 3
    G3 = -math.pi*math.pow(R, 2)*L - temp*math.pi*math.pow(R, 3) + 1296000
    G4 = L - 240

    if(Ts > 99 or Ts < 0 or Th > 99 or Th < 0 or R > 200 or R < 10 or L > 200 or L < 10 or G1 > 0 or G2 > 0 or G3 > 0 or G4 > 0):
        fit_val = sys.float_info.max
    else:
        fit_val = 0.6224*Ts*R*L + 1.7781*Th*math.pow(R, 2) + 3.1661*math.pow(Ts, 2)*L + 19.84*math.pow(Ts, 2)*R
    

    if(F_MIN_VAL > fit_val):
        F_MIN_VAL = fit_val
        designConstraits = [G1, G2, G3, G4]

    return fit_val

def setParams(alpha, beta, name):
    #Set global variablesF_M
    global stop_evolution
    global q_min_series
    global q_max_series
    global q_avg_series
    global folderName

    stop_evolution = False    
    q_min_series.clear()      
    q_max_series.clear()    
    q_avg_series.clear()
    folderName = name
    
    #Set global variables
    global ALPHA
    global BETA
    ALPHA = alpha
    BETA = beta


def initializeObjects(iteration):
    global q_min_series
    global q_max_series
    global q_avg_series
    global F_MIN_VAL
    
    # Variable for keeping track of the number of generations
    q_min_series.clear()
    q_max_series.clear()
    q_avg_series.clear()
    curr_g = 0
    
    #print("generatePopulation " + str(NO_DIMS))


    population = Population(POP_SIZE, F_MIN, F_MAX)

    population.generatePopulation(NO_DIMS)
    
    best_ind = population.getBestInd(NO_DIMS)

    gFits = [1, 6]

    #print("Pouplation generated " + str(list(map( lambda atom: len(atom.position), population.atoms))))
    
    while min(gFits) != 0.0 and curr_g < NGEN:
        
        #print("Generation--"+str(curr_g)+"--" + " best_ind " + str(best_ind.fitValue) +" population.fit_best " + str(population.fit_best))
        
        for atom in population.atoms:
            
            atom.fitValue = costFunction(atom.position)
            if(atom.fitValue < best_ind.fitValue):
                best_ind = population.getBestInd(NO_DIMS)
            atom.calculateMass(population.mi_sum, population.getFitBest(), population.getFitWorst())
            position, velocity = population.calculateVelocityAndPosition(ALPHA, BETA, atom, best_ind, curr_g+1, NGEN)
            atom.position = position
            atom.velocity = velocity

            #atom.fitValue = costFunction(position)

        population.updatePopulation()

        curr_g += 1
        
        q_min_series.append(min(gFits))
        #print("Best for gen " + str(curr_g) + " :" + str(min(gFits)))
        q_max_series.append(max(gFits))
        q_avg_series.append(average(gFits))
        gFits.clear()
        gFits = population.getFitValues()
        
    #print("------------------")
    gFits.clear()
    del population
    #print("Best individual is(q_min_series)" + str(min(q_min_series)))
    print("Best individual is %s, %s" % (best_ind.position, costFunction(best_ind.position)))
    print("Design constraints are: %s %s %s %s" % (designConstraits[0], designConstraits[1], designConstraits[2], designConstraits[3]))
    
    #Visulaize and save final solution
    f1 = plt.figure()
    plt.plot(q_min_series, 'b', linewidth=0.6)
    plt.plot(q_max_series, 'g', linewidth=0.6)
    plt.plot(q_avg_series, 'orange', linewidth=0.6)
    plt.xlabel('Generations')
    plt.ylabel('Fitness values')
    plt.legend(["MIN", "MAX", "AVG"], loc ="upper center", ncol = 3)
    #plt.show()
    title = folderName + "ASO_iter_" + str(iteration) + "_dubinska_tezina(" + str(ALPHA) + ")_tezina_mnozitelja(" + str(BETA) + ").png"
    plt.savefig(title)
    plt.clf()
    plt.close(f1)
    
    F_MIN_VAL = sys.float_info.max

    return best_ind.position, best_ind.fitValue, designConstraits


def depAlpha():
    alphas = [40, 50, 60]

    for alpha in alphas:
        beta = 0.2
        name = "ASO/Pressure_Vessel/Alpha/"
        
        setParams(alpha, beta, name)
        
        fields = ['Best individual', 'Fitness value', 'Design constraits']
        rows = []
        
        for i in range(1, NO_EXP+1):
            best_ind, fit_value, designConstraits = initializeObjects(i)
            rows.append([str(best_ind), str(fit_value), str(designConstraits)])
        
        filename = folderName + "ASO_depAlpha(" + str(alpha) + ").csv"
        #print("-----------------------")
        # writing to csv file  
        with open(filename, 'w') as csvfile:  
            # creating a csv writer object  
            csvwriter = csv.writer(csvfile)  
                
            # writing the fields  
            csvwriter.writerow(fields)  
                
            # writing the data rows  
            csvwriter.writerows(rows)


def depBeta():
    betas = [0.1, 0.2, 0.3]

    for beta in betas:
        alpha = 50

        name = "ASO/Pressure_Vessel/Beta/"
        setParams(alpha, beta, name)
        
        fields = ['Best individual', 'Fitness value', 'Design constraits']
        rows = []
        
        for i in range(1, NO_EXP+1):
            best_ind, fit_value, designConstraits = initializeObjects(i)
            rows.append([str(best_ind), str(fit_value), str(designConstraits)])
        
        filename = folderName + "ASO_depBeta(" + str(beta) + ").csv"
      
        # writing to csv file  
        with open(filename, 'w') as csvfile:

            # creating a csv writer object  
            csvwriter = csv.writer(csvfile)  
                
            # writing the fields  
            csvwriter.writerow(fields)  
                
            # writing the data rows  
            csvwriter.writerows(rows)




if __name__ == "__main__":
    
    depAlpha()
    depBeta()