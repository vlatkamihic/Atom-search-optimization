import matplotlib.pyplot as plt
import math
import time
from atom import Atom
from Population import Population
import sys

plt.rcParams.update({'figure.max_open_warning': 0})

####General parameters####
NO_EXP = 15 # number of experiments
NO_DIMS = 4 #Size of the individual (number of dimensions)
NGEN = 150 #number of generations
POP_SIZE = 30  #population size
#########################
#####ASO parameters######
ALPHA = 50
BETA = 0.2

####Other global variables####
F_MIN = 0    #Pressure Vessel Design function interval
F_MAX = 200     #Pressure Vessel Design function interval
G1 = 0 #Hoop stress
G2 = 0 #Longitudinal stress
G3 = 0 #Volume
G4 = 0 #Lenght
stop_evolution = False
designConstraits = []
F_MIN_VAL = sys.float_info.max
best_fit = sys.float_info.max
best_pos = 0
best_designConstraits = 0

#Pressure_Vessel cost function
def costFunction(individual):
    #Implement Pressure_Vessel function
    global F_MIN_VAL
    global designConstraits

    Ts = individual[0]
    Th = individual[1]
    R = individual[2]
    L = individual[3]
    
    fit_val = 0
    G1 = -Ts + 0.0193*R
    G2 = -Th + 0.00954*R
    temp = 4 / 3
    G3 = -math.pi*math.pow(R, 2)*L - temp*math.pi*math.pow(R, 3) + 1296000
    G4 = L - 240

    if(Ts > 99 or Ts < 0 or Th > 99 or Th < 0 or R > 200 or R < 10 or L > 200 or L < 10 or G1 > 0 or G2 > 0 or G3 > 0 or G4 > 0):
        fit_val = sys.float_info.max
    else:
        fit_val = 0.6224*Ts*R*L + 1.7781*Th*math.pow(R, 2) + 3.1661*math.pow(Ts, 2)*L + 19.84*math.pow(Ts, 2)*R
    

    if(F_MIN_VAL > fit_val):
        F_MIN_VAL = fit_val
        designConstraits = [G1, G2, G3, G4]

    return fit_val


def setParams(alpha, beta):
    #Set global variablesF_M
    global stop_evolution
    stop_evolution = False 
    
    #Set global variables
    global ALPHA
    global BETA
    ALPHA = alpha
    BETA = beta


def initializeObjects(iteration):
    global F_MIN_VAL
    global designConstraits
    curr_g = 0
    
    #print("generatePopulation " + str(NO_DIMS))


    population = Population(POP_SIZE, F_MIN, F_MAX)

    population.generatePopulation(NO_DIMS)
    
    best_ind = population.getBestInd(NO_DIMS)

    #print("Pouplation generated " + str(list(map( lambda atom: len(atom.position), population.atoms))))
    
    while curr_g < NGEN:
        
        #print("Generation--"+str(curr_g)+"--" + " best_ind " + str(best_ind.fitValue) +" population.fit_best " + str(population.fit_best))
        
        for atom in population.atoms:
            
            atom.fitValue = costFunction(atom.position)
            if(atom.fitValue < best_ind.fitValue):
                best_ind = population.getBestInd(NO_DIMS)
            atom.calculateMass(population.mi_sum, population.getFitBest(), population.getFitWorst())
            position, velocity = population.calculateVelocityAndPosition(ALPHA, BETA, atom, best_ind, curr_g+1, NGEN)
            atom.position = position
            atom.velocity = velocity

            #atom.fitValue = costFunction(position)

        population.updatePopulation()

        curr_g += 1
        
        
    #print("------------------")
    del population
    #print("Best individual is %s, %s" % (best_ind.position, best_ind.fitValue))
    
    F_MIN_VAL = sys.float_info.max

    return best_ind.position, best_ind.fitValue, designConstraits




if __name__ == "__main__":
    start_time = time.time()
    alphas = [40, 50, 60]
    betas = [0.1, 0.2, 0.3]

    best_alpha = 0
    best_beta = 0

    for alpha in alphas:
        for beta in betas:
                
            setParams(alpha, beta)
            
            for i in range(1, NO_EXP+1):
                best_ind, best_indFit, designConstraits = initializeObjects(i)
                if(best_fit > best_indFit):
                    best_fit = best_indFit
                    best_pos = best_ind
                    best_alpha = alpha
                    best_beta = beta
                    best_designConstraits = designConstraits
                
    print("Best individual: " + str(best_pos))
    print(" -fitness value: " + str(best_fit))
    print(" -dimention: " + str(NO_DIMS))
    print(" -alpha: " + str(best_alpha))
    print(" -beta: " + str(best_beta))
    print(" -design constraits: " + str(best_designConstraits))
                
    best_fit = sys.float_info.max
    best_pos = 0   
    best_alpha = 0
    best_beta = 0
    best_designConstraits = 0
    
    print("--- %s seconds ---" % (time.time() - start_time))
