import math
from deap import base, creator, tools
import random
import operator
import matplotlib.pyplot as plt
import csv

####General parameters####
NO_EXP = 5 # number of experiments
NO_DIMS = 4 #Size of the individual (number of dimensions)
NGEN = 500 #number of generations
POP_SIZE = 100  #population size
#########################
######GA parameters######
GA_MUTPB = 0.2 #probability for mutating an individual
GA_NELT = 4    #number of elite individuals
GA_MAX_ABS = 0.4 #maximum absolute value a mutated gene can have
#########################

####Other global variables####
F_MIN = 0    #Pressure Vessel Design function interval
F_MAX = 200     #Pressure Vessel Design function interval
G1 = 0 #Hoop stress
G2 = 0 #Longitudinal stress
G3 = 0 #Volume
G4 = 0 #Lenght
stop_evolution = False
q_min_series = []
q_max_series = []
q_avg_series = []
folderName = "GA/Pressure_Vessel/"
F_MIN_VAL = 55000005
designConstraits = []


#Pressure_Vessel cost function
def costFunction(individual):
    #Implement Pressure_Vessel function
    global F_MIN_VAL
    global designConstraits
    global BOUND

    Ts = individual[0]
    Th = individual[1]
    R = individual[2]
    L = individual[3]
    
    fit_val = 0
    G1 = -Ts + 0.0193*R
    G2 = -Th + 0.00954*R
    temp = 4 / 3
    G3 = -math.pi*math.pow(R, 2)*L - temp*math.pi*math.pow(R, 3) + 1296000
    G4 = L - 240

    if(Ts > 99 or Ts < 0 or Th > 99 or Th < 0 or R > 200 or R < 10 or L > 200 or L < 10 or G1 > 0 or G2 > 0 or G3 > 0 or G4 > 0):
        fit_val = 55000000
    else:
        fit_val = 0.6224*Ts*R*L + 1.7781*Th*math.pow(R, 2) + 3.1661*math.pow(Ts, 2)*L + 19.84*math.pow(Ts, 2)*R
    

    if(F_MIN_VAL > fit_val):
        F_MIN_VAL = fit_val
        designConstraits = [G1, G2, G3, G4]

    return fit_val,


def setParams(mutation, elite, maxAbsMutation, name):
    #Set global variables
    global stop_evolution
    global q_min_series
    global q_max_series

    global q_avg_series
    global folderName
    stop_evolution = False    
    q_min_series.clear()      
    q_max_series.clear()    
    q_avg_series.clear()
    folderName = name
    
    #Set global variables from information on UI
    global NO_DIMS
    global GA_MUTPB
    global GA_NELT
    global GA_MAX_ABS
    GA_MUTPB = mutation
    GA_NELT = elite
    GA_MAX_ABS = maxAbsMutation

    

def initializeAndGenerateObjects(iteration):
        
    ####Initialize deap GA objects####
    
    #Make creator that minimize. If it would be 1.0 instead od -1.0 than it would be maxmize
    cREATOR = creator
    cREATOR.create("FitnessMin", base.Fitness, weights=(-1.0,))
    
    #Create an individual (a blueprint for cromosomes) as a list with a specified fitness type
    cREATOR.create("Individual", list, fitness=cREATOR.FitnessMin)
    
    #Create base toolbox for finishing creation of a individual (cromosome)
    tOOlbox = base.Toolbox()
    
    #Define what type of data (number, gene) will it be in the cromosome
    tOOlbox.register("attr_float", random.uniform, F_MIN, F_MAX) 
    #Initialization procedure (initRepeat) for the cromosome. For the individual to be completed we need to run initRepeat for the amaout of genes the cromosome includes
    tOOlbox.register("individual", tools.initRepeat, cREATOR.Individual, tOOlbox.attr_float, n=NO_DIMS)
    
    #Create a population of individuals (cromosomes). The population is then created by toolbox.population(n=300) where 'n' is the number of cromosomes in population
    tOOlbox.register("population", tools.initRepeat, list, tOOlbox.individual)
    
    #Register evaluation function
    tOOlbox.register("evaluate", costFunction)
    
    #Register what genetic operators to use
    #Standard coding
    tOOlbox.register("mate", tools.cxTwoPoint)#Use two point recombination
    tOOlbox.register("mutate", tools.mutGaussian, mu=0, sigma=GA_MAX_ABS, indpb=0.5)
    
    tOOlbox.register("select", tools.selTournament, tournsize=3)    #Use tournament selection
    
    ##################################
    
    #Generate initial population. Will be a member variable so we can easely pass everything to new thread
    gPop = tOOlbox.population(n=POP_SIZE)

    #Evaluate initial population, we map() the evaluation function to every individual and then assign their respective fitness, map runs evaluate function for each individual in pop
    fitnesses = list(map(tOOlbox.evaluate, gPop))
    for ind, fit in zip(gPop, fitnesses):
        ind.fitness.values = fit    #Assign calcualted fitness value to individuals
    
    #Extracting all the fitnesses of all individuals in a population so we can monitor and evovlve the algorithm until it reaches 0 or max number of generation is reached
    gFits = [ind.fitness.values[0] for ind in gPop]
    
    #Start evolution
    return evolveGA(cREATOR, tOOlbox, gPop, gFits, iteration)



    
#Function for GA evolution
def evolveGA(cREATOR, tOOlbox, gPop, gFits, iteration):
    global q_min_series
    global q_max_series
    global q_avg_series
    global F_MIN_VAL
    global designConstraits
    
    
    # Variable for keeping track of the number of generations
    q_min_series.clear()
    q_max_series.clear()
    q_avg_series.clear()
    curr_g = 0
    # and curr_g < NGEN
    # Begin the evolution till goal is reached or max number of generation is reached
    while min(gFits) != 0 and curr_g < NGEN:
        #Check if evolution and thread need to stop
        if stop_evolution:
            break #Break the evolution loop
        
        # A new generation
        curr_g = curr_g + 1
        print("-- Generation %i --" % curr_g)

        
        # Select the next generation individuals
        #Select POP_SIZE - NELT number of individuals. Since recombination is between neigbours, not two naighbours should be the clone of the same individual
        offspring = []
        offspring.append(tOOlbox.select(gPop, 1)[0])    #add first selected individual
        for i in range(POP_SIZE - GA_NELT - 1):    # -1 because the first seleceted individual is already added
            while True:
                new_o = tOOlbox.select(gPop, 1)[0]
                if new_o != offspring[len(offspring) - 1]:   #if it is different than the last inserted then add to offspring and break
                    offspring.append(new_o)
                    break
        
        # Clone the selected individuals because all of the changes are inplace
        offspring = list(map(tOOlbox.clone, offspring))
        
        # Apply crossover on the selected offspring
        for child1, child2 in zip(offspring[::2], offspring[1::2]):
            tOOlbox.mate(child1, child2)    #inplace recombination
            #Invalidate new children fitness values
            del child1.fitness.values
            del child2.fitness.values

        #Apply mutation on the offspring
        for mutant in offspring:
            if random.random() < GA_MUTPB:
                tOOlbox.mutate(mutant)
                del mutant.fitness.values
        
        #Add elite individuals #Is clonning needed?
        offspring.extend(list(map(tOOlbox.clone, tools.selBest(gPop, GA_NELT))))         
                
        # Evaluate the individuals with an invalid fitness
        invalid_ind = [ind for ind in offspring if not ind.fitness.valid]
        fitnesses = map(tOOlbox.evaluate, invalid_ind)
        for ind, fit in zip(invalid_ind, fitnesses):
            ind.fitness.values = fit
        
        print("  Evaluated %i individuals" % len(invalid_ind))
        
        #Replace population with offspring
        gPop[:] = offspring
        
        # Gather all the fitnesses in one list and print the stats
        gFits = [ind.fitness.values[0] for ind in gPop]
        
        length = len(gPop)
        mean = sum(gFits) / length
        sum2 = sum(x*x for x in gFits)
        std = abs(sum2 / length - mean**2)**0.5
        
        q_min_series.append(min(gFits))
        q_max_series.append(max(gFits))
        q_avg_series.append(mean)
        
                
    #Printing best individual
    best_ind = tools.selBest(gPop, 1)[0]
    print("Best individual is %s, %s" % (best_ind, best_ind.fitness.values))
    print("Design constraints are: %s %s %s %s" % (designConstraits[0], designConstraits[1], designConstraits[2], designConstraits[3]))

    #Visulaize and save final solution
    f1 = plt.figure()
    plt.plot(q_min_series, 'b', linewidth=0.6)
    plt.plot(q_max_series, 'g', linewidth=0.6)
    plt.plot(q_avg_series, 'orange', linewidth=0.6)
    plt.xlabel('Generations')
    plt.ylabel('Fitness values')
    plt.legend(["MIN", "MAX", "AVG"], loc ="upper center", ncol = 3)
    title = folderName + "GA_iter_" + str(iteration) + "_postotak_mutacije(" + str(GA_MUTPB) + ")_broj_elitnih_članova(" + str(GA_NELT) + ")_max_abs(" + str(GA_MAX_ABS) + ").png"
    plt.savefig(title)
    plt.clf()

    F_MIN_VAL = 55000005
    

    return best_ind, designConstraits

def depMutation():
    mutations = [0.05, 0.1, 0.2]

    for mutation in mutations:
        elite = 4
        maxAbsMutation = 0.4
        name = "GA/Pressure_Vessel/Mutation/"
        setParams(mutation, elite, maxAbsMutation, name)
        fields = ['Best individual', 'Fitness value', 'Design constraits']
        rows = []
        for i in range(1, NO_EXP+1):
            best_ind, designConstraits = initializeAndGenerateObjects(i)
            rows.append([str(best_ind), str(best_ind.fitness.values), str(designConstraits)])
        filename = folderName + "GA_depMutation(" + str(mutation) + ").csv"
      
        # writing to csv file  
        with open(filename, 'w') as csvfile:  
            # creating a csv writer object  
            csvwriter = csv.writer(csvfile)  
                
            # writing the fields  
            csvwriter.writerow(fields)  
                
            # writing the data rows  
            csvwriter.writerows(rows)




def depEliteMembers():
    elites = [4, 8, 16]

    for elite in elites:
        mutation = 0.2
        maxAbsMutation = 0.4
        name = "GA/Pressure_Vessel/EliteMembers/"
        setParams(mutation, elite, maxAbsMutation, name)
        fields = ['Best individual', 'Fitness value', 'Design constraits']
        rows = []
        for i in range(1, NO_EXP+1):
            best_ind, designConstraits = initializeAndGenerateObjects(i)
            rows.append([str(best_ind), str(best_ind.fitness.values), str(designConstraits)])
        filename = folderName + "GA_depEliteMembers(" + str(elite) + ").csv"
      
        # writing to csv file  
        with open(filename, 'w') as csvfile:  
            # creating a csv writer object  
            csvwriter = csv.writer(csvfile)  
                
            # writing the fields  
            csvwriter.writerow(fields)  
                
            # writing the data rows  
            csvwriter.writerows(rows)


def depMaxAbsMutation():
    maxAbsMutations = [0.1, 0.4, 0.8]

    for maxAbsMutation in maxAbsMutations:
        mutation = 0.2
        elite = 4
        name = "GA/Pressure_Vessel/MaxAbsMutation/"
        setParams(mutation, elite, maxAbsMutation, name)
        
        fields = ['Best individual', 'Fitness value', 'Design constraits']
        rows = []
        
        for i in range(1, NO_EXP+1):
            best_ind, designConstraits = initializeAndGenerateObjects(i)
            rows.append([str(best_ind), str(best_ind.fitness.values), str(designConstraits)])
        
        filename = folderName + "GA_depMaxAbsMutation(" + str(maxAbsMutation) + ").csv"
      
        # writing to csv file  
        with open(filename, 'w') as csvfile:

            # creating a csv writer object  
            csvwriter = csv.writer(csvfile)  
                
            # writing the fields  
            csvwriter.writerow(fields)  
                
            # writing the data rows  
            csvwriter.writerows(rows)




if __name__ == "__main__":

    depMutation()
    depEliteMembers()
    depMaxAbsMutation()