import math
from deap import base, creator, tools
import random
import operator
import matplotlib.pyplot as plt
import csv

####General parameters####
NO_EXP = 5 # number of experiments
NO_DIMS = 5 #Size of the individual (number of dimensions)
NGEN = 500 #number of generations
POP_SIZE = 100  #population size
#########################
#####PSO parameters######
PSO_INERTIA = 0.7   #inertia factor
PSO_PERSONAL = 1.5  #personal factor
PSO_SOCIAL = 1.0    #social factor

####Other global variables####
F_MIN = -5.0    #Rastrigin function interval
F_MAX = 5.0     #Rastrigin function interval
stop_evolution = False
q_min_series = []
q_max_series = []
q_avg_series = []
folderName = "PSO/Rastrigin/"

#Rastrigin cost function
def costFunction(individual):
    #Implement Rastrigin function
    A = 10
    omega = 2*math.pi
    
    n = NO_DIMS
    fit_val = A*n
    for i in range(n):
        xi = individual[i]
        fit_val += (math.pow(xi, 2) - A*math.cos(omega*xi))
    

    return fit_val,

def setParams(dimention, inertia, socialFactor, personalFactor, name):
    #Set global variables
    global stop_evolution
    global q_min_series
    global q_max_series
    global q_avg_series
    global folderName

    stop_evolution = False    
    q_min_series.clear()      
    q_max_series.clear()    
    q_avg_series.clear()
    folderName = name
    
    #Set global variables from information on UI
    global NO_DIMS
    global PSO_SOCIAL
    global PSO_INERTIA
    global PSO_PERSONAL
    PSO_PERSONAL = personalFactor
    PSO_SOCIAL = socialFactor
    PSO_INERTIA = inertia
    NO_DIMS = dimention


def generateParticle(cr, size, min_val, max_val):
    #generate particle with random position
    particle = cr.Particle(random.uniform(min_val, max_val) for _ in range(size))
    #generate random speed vector for particle
    particle.speed = list(random.uniform(min_val, max_val) for _ in range(size))
    particle.best = particle[:]
    return particle

def updateParticle(particle, g_best, inert_fact, ind_fact, soc_fact):
    first_part = list(inert_fact * particle.speed[i] for i in range(len(particle.speed)))
    second_part = list(ind_fact * random.random() * (particle.best[i] - particle[i]) for i in range(len(particle.best)))
    third_part = list(soc_fact * random.random() * (g_best[i] - particle[i]) for i in range(len(g_best)))
    #Update particle speed by adding all three parts of the formula
    particle.speed = list(map(operator.add, map(operator.add, first_part, second_part), third_part))
    #Update particle position by adding speed to previous particle position
    particle[:] = list(map(operator.add, particle, particle.speed))

def initializeAndGenerateObjects(iteration):
    ####Initialize deap PSO objects####
        
    #Make creator that minimize. If it would be 1.0 instead od -1.0 than it would be maxmize
    cREATOR = creator
    cREATOR.create("FitnessMin", base.Fitness, weights=(-1.0,))
    
    #Create an individual (a blueprint for cromosomes) as a list with a specified fitness type
    cREATOR.create("Particle", list, fitness=cREATOR.FitnessMin, speed=list, best=None)

    #Create base toolbox for finishing creation of a individual (particle) and population
    tOOlbox = base.Toolbox()
    
    #Particle initialization
    tOOlbox.register("particle", generateParticle, cr=cREATOR, size=NO_DIMS, min_val=F_MIN, max_val=F_MAX)
    
    #Create a population of individuals (particles). The population is then created by e.g. toolbox.population(n=300) where 'n' is the number of particles in population
    tOOlbox.register("population", tools.initRepeat, list, tOOlbox.particle)
    
    #Update function for each particle
    tOOlbox.register("update", updateParticle)
    
    #Evaluation function for each particle
    tOOlbox.register("evaluate", costFunction)
    
    ##################################
    
    #Create population
    gPop = tOOlbox.population(n=POP_SIZE)
    
    #Evaluate initial population, we map() the evaluation function to every individual and then assign their respective fitness, map runs emaluet function for each individual in pop
    fitnesses = list(map(tOOlbox.evaluate, gPop))
    for ind, fit in zip(gPop, fitnesses):
        ind.fitness.values = fit
        
    #Extracting all the fitnesses of all individuals in a population so we can monitor and evovlve the algorithm until it reaches 0 or max number of generation is reached
    gFits = [ind.fitness.values[0] for ind in gPop]
    
    #Extraction current best position
    global_best_position = tools.selBest(gPop, 1)[0][:]

    #Start evolution
    return evolvePSO(cREATOR, tOOlbox, gPop, gFits, iteration, global_best_position)

def evolvePSO(cREATOR, tOOlbox, gPop, gFits, iteration, global_best_position):
    global q_min_series
    global q_max_series
    global q_avg_series
    
    # Variable for keeping track of the number of generations
    q_min_series.clear()
    q_max_series.clear()
    q_avg_series.clear()
    curr_g = 0
    
    while min(gFits) != 0.0 and curr_g < NGEN:
        #Check if evolution and thread need to stop
        if stop_evolution:
            break #Break the evolution loop
            
        # A new generation
        curr_g = curr_g + 1
        print("-- Generation %i --" % curr_g)
        
        #Update particle position and evaluate particle
        for particle in gPop:
            #Update
            tOOlbox.update(particle, global_best_position, PSO_INERTIA, PSO_PERSONAL, PSO_SOCIAL)
            #Evaluate
            fit = tOOlbox.evaluate(particle)
            #Update best position
            if fit[0] < particle.fitness.values[0]:
                particle.best = particle[:]
            #Update fitness
            particle.fitness.values = fit            
        
        #Extracting all the fitnesses of all individuals in a population so we can monitor and evovlve the algorithm until it reaches 0 or max number of generation is reached
        gFits = [ind.fitness.values[0] for ind in gPop]
    
        #Extraction current best position
        global_best_position = tools.selBest(gPop, 1)[0][:]
        
        #Stats
        length = len(gPop)
        mean = sum(gFits) / length
        sum2 = sum(x*x for x in gFits)
        std = abs(sum2 / length - mean**2)**0.5
        
        q_min_series.append(min(gFits))
        q_max_series.append(max(gFits))
        q_avg_series.append(mean)
        
        
    
    #Printing best individual
    best_ind = tools.selBest(gPop, 1)[0]
    print("Best individual is %s, %s" % (best_ind, best_ind.fitness.values))
    
    #Visulaize and save final solution
    f1 = plt.figure()
    plt.plot(q_min_series, 'b', linewidth=0.6)
    plt.plot(q_max_series, 'g', linewidth=0.6)
    plt.plot(q_avg_series, 'orange', linewidth=0.6)
    plt.xlabel('Generations')
    plt.ylabel('Fitness values')
    plt.legend(["MIN", "MAX", "AVG"], loc ="upper center", ncol = 3)
    title = folderName + "PSO_iter_" + str(iteration) + "_faktor_inercije(" + str(PSO_INERTIA) + ")_individualni_faktor(" + str(PSO_PERSONAL) + ")_socijalni_faktor(" + str(PSO_SOCIAL) + ").png"
    plt.savefig(title)
    plt.clf()
    

    return best_ind

def depPersonalFactor(dimention):
    personalFactors = [0.5, 1.0, 1.5]

    for personalFactor in personalFactors:
        inertia = 0.0
        socialFactor = 0.5
        name = "PSO/Rastrigin/PersonalFactor/Dimention" + str(dimention) + "/"
        
        setParams(dimention, inertia, socialFactor, personalFactor, name)
        
        fields = ['Best individual', 'Fitness value']
        rows = []
        
        for i in range(1, NO_EXP+1):
            best_ind = initializeAndGenerateObjects(i)
            rows.append([str(best_ind), str(best_ind.fitness.values)])
        filename = folderName + "PSO_depPersonalFactor(" + str(personalFactor) + ").csv"
      
        # writing to csv file  
        with open(filename, 'w') as csvfile:  
            # creating a csv writer object  
            csvwriter = csv.writer(csvfile)  
                
            # writing the fields  
            csvwriter.writerow(fields)  
                
            # writing the data rows  
            csvwriter.writerows(rows)




def depSocialFactor(dimention):
    socialFactors = [0.5, 1.0, 1.5]

    for socialFactor in socialFactors:
        inertia = 0.37
        personalFactor = 0.5
        name = "PSO/Rastrigin/SocialFactor/Dimention" + str(dimention) + "/"
        
        setParams(dimention, inertia, socialFactor, personalFactor, name)
        
        fields = ['Best individual', 'Fitness value']
        rows = []
        
        for i in range(1, NO_EXP+1):
            best_ind = initializeAndGenerateObjects(i)
            rows.append([str(best_ind), str(best_ind.fitness.values)])
        
        filename = folderName + "PSO_depSocialFactor(" + str(socialFactor) + ").csv"
      
        # writing to csv file  
        with open(filename, 'w') as csvfile:  
            # creating a csv writer object  
            csvwriter = csv.writer(csvfile)  
                
            # writing the fields  
            csvwriter.writerow(fields)  
                
            # writing the data rows  
            csvwriter.writerows(rows)


def depInertiaFactor(dimention):
    inertiaFactors = [0.0, 0.37, 0.74]

    for inertia in inertiaFactors:
        socialFactor = 0.5
        personalFactor = 0.5
        name = "PSO/Rastrigin/InertiaFactor/Dimention" + str(dimention) + "/"
        setParams(dimention, inertia, socialFactor, personalFactor, name)
        
        fields = ['Best individual', 'Fitness value']
        rows = []
        
        for i in range(1, NO_EXP+1):
            best_ind = initializeAndGenerateObjects(i)
            rows.append([str(best_ind), str(best_ind.fitness.values)])
        
        filename = folderName + "PSO_depInertiaFactor(" + str(inertia) + ").csv"
      
        # writing to csv file  
        with open(filename, 'w') as csvfile:

            # creating a csv writer object  
            csvwriter = csv.writer(csvfile)  
                
            # writing the fields  
            csvwriter.writerow(fields)  
                
            # writing the data rows  
            csvwriter.writerows(rows)



def optimizeDimention(dimention):
    
    depPersonalFactor(dimention)
    depSocialFactor(dimention)
    depInertiaFactor(dimention)



if __name__ == "__main__":
    dimentions = [2, 3, 5, 10, 20, 30]

    for dimention in dimentions:
        optimizeDimention(dimention)